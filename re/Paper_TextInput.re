[@bs.module "react-native-paper"]
external reactClass : ReasonReact.reactClass = "TextInput";

type capitalize = [ | `none | `sentences | `words | `characters];

let make =
    (
      ~allowFontScaling: bool=false,
      ~autoCorrect: bool=false,
      ~autoFocus: bool=false,
      ~autoCapitalize: option(capitalize)=?,
      ~autoGrow: bool=false,
      ~blurOnSubmit: bool=false,
      ~caretHidden: bool=false,
      ~contextMenuHidden: bool=false,
      ~dataDetectorTypes: option(string)=?,
      ~enablesReturnKeyAutomatically: bool=false,
      ~keyboardAppearance: option(string)=?,
      ~defaultValue: option(string)=?,
      ~disabled: bool=false,
      ~disableFullscreenUI: bool=false,
      ~editable: bool=false,
      ~keyboardType: option(string)=?,
      ~inlineImageLeft: option(string)=?,
      ~inlineImagePadding: option(string)=?,
      ~maxHeight: option(float)=?,
      ~maxLength: option(int)=?,
      ~label: option(string)=?,
      ~placeholder: option(string)=?,
      ~placeholderTextColor: option(string)=?,
      ~returnKeyType: option(string)=?,
      ~returnKeyLabel: option(string)=?,
      ~spellCheck: bool=false,
      ~textBreakStrategy: option(string)=?,
      ~underlineColorAndroid: option(string)=?,
      ~clearButtonMode: option(string)=?,
      ~clearTextOnFocus: option(string)=?,
      ~secureTextEntry: bool=false,
      ~selectTextOnFocus: bool=false,
      ~selection: option(Js.t({..}))=?,
      ~selectionColor: option(string)=?,
      ~underlineColor: option(string)=?,
      ~multline: bool=false,
      ~numberOfLines: option(int)=?,
      ~value: option(string)=?,
      ~theme: option(Js.t({..}))=?,
      ~style: option(BsReactNative.Style.t)=?,
      ~onChange: option(unit => unit)=?,
      ~onChangeText: option(string => unit)=?,
      ~onContentSizeChange: option(unit => unit)=?,
      ~onKeyPress: option(unit => unit)=?,
      ~onEndEditing: option(unit => unit)=?,
      ~onLayout: option(unit => unit)=?,
      ~onScroll: option(unit => unit)=?,
      ~onSelectionChange: option(unit => unit)=?,
      ~onSubmitEditing: option(unit => unit)=?,
      ~onFocus: option(unit => unit)=?,
      ~onBlur: option(unit => unit)=?,
      children
    ) =>
  ReasonReact.wrapJsForReason(
    ~reactClass,
    ~props=
      Js.Nullable.(
        {
          "allowFontScaling": Js.Boolean.to_js_boolean(allowFontScaling),
          "autoCorrect": Js.Boolean.to_js_boolean(autoCorrect),
          "autoFocus": Js.Boolean.to_js_boolean(autoFocus),
          "autoCapitalize": Js.Undefined.fromOption(autoCapitalize),
          "autoGrow": Js.Boolean.to_js_boolean(autoGrow),
          "blurOnSubmit": Js.Boolean.to_js_boolean(blurOnSubmit),
          "caretHidden": Js.Boolean.to_js_boolean(caretHidden),
          "contextMenuHidden": Js.Boolean.to_js_boolean(contextMenuHidden),
          "dataDetectorTypes": Js.Undefined.fromOption(dataDetectorTypes),
          "enablesReturnKeyAutomatically":
            Js.Boolean.to_js_boolean(enablesReturnKeyAutomatically),
          "keyboardAppearance": Js.Undefined.fromOption(keyboardAppearance),
          "defaultValue": Js.Undefined.fromOption(defaultValue),
          "disabled": Js.Boolean.to_js_boolean(disabled),
          "disableFullscreenUI": Js.Boolean.to_js_boolean(disableFullscreenUI),
          "editable": Js.Boolean.to_js_boolean(editable),
          "keyboardType": Js.Undefined.fromOption(keyboardType),
          "inlineImageLeft": Js.Undefined.fromOption(inlineImageLeft),
          "inlineImagePadding": Js.Undefined.fromOption(inlineImagePadding),
          "maxHeight": Js.Undefined.fromOption(maxHeight),
          "maxLength": Js.Undefined.fromOption(maxLength),
          "label": Js.Undefined.fromOption(label),
          "placeholder": Js.Undefined.fromOption(placeholder),
          "placeholderTextColor": Js.Undefined.fromOption(placeholderTextColor),
          "returnKeyType": Js.Undefined.fromOption(returnKeyType),
          "returnKeyLabel": Js.Undefined.fromOption(returnKeyLabel),
          "spellCheck": Js.Boolean.to_js_boolean(spellCheck),
          "textBreakStrategy": Js.Undefined.fromOption(textBreakStrategy),
          "underlineColorAndroid":
            Js.Undefined.fromOption(underlineColorAndroid),
          "clearButtonMode": Js.Undefined.fromOption(clearButtonMode),
          "clearTextOnFocus": Js.Undefined.fromOption(clearTextOnFocus),
          "secureTextEntry": Js.Boolean.to_js_boolean(secureTextEntry),
          "selectTextOnFocus": Js.Boolean.to_js_boolean(selectTextOnFocus),
          "selection": Js.Undefined.fromOption(selection),
          "selectionColor": Js.Undefined.fromOption(selectionColor),
          "underlineColor": Js.Undefined.fromOption(underlineColor),
          "multline": Js.Boolean.to_js_boolean(multline),
          "numberOfLines": Js.Undefined.fromOption(numberOfLines),
          "value": Js.Undefined.fromOption(value),
          "theme": Js.Undefined.fromOption(theme),
          "style": Js.Undefined.fromOption(style),
          "onChange": Js.Undefined.fromOption(onChange),
          "onChangeText": Js.Undefined.fromOption(onChangeText),
          "onContentSizeChange": Js.Undefined.fromOption(onContentSizeChange),
          "onKeyPress": Js.Undefined.fromOption(onKeyPress),
          "onEndEditing": Js.Undefined.fromOption(onEndEditing),
          "onLayout": Js.Undefined.fromOption(onLayout),
          "onScroll": Js.Undefined.fromOption(onScroll),
          "onSelectionChange": Js.Undefined.fromOption(onSelectionChange),
          "onSubmitEditing": Js.Undefined.fromOption(onSubmitEditing),
          "onFocus": Js.Undefined.fromOption(onFocus),
          "onBlur": Js.Undefined.fromOption(onBlur)
        }
      ),
    children
  );
